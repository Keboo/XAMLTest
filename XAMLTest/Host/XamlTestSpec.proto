syntax = "proto3";

option csharp_namespace = "XamlTest.Host";

package XamlTest;

// The visual tree service definition.
service Protocol {

  //Get windows in app
  rpc GetWindows (GetWindowsQuery) returns (GetWindowsResult);

  //Get the main windowIds
  rpc GetMainWindow (GetWindowsQuery) returns (GetWindowsResult);

  //Get elements
  rpc GetElement (ElementQuery) returns (ElementResult);

  //Retrieve the property off of an element
  rpc GetProperty (PropertyQuery) returns (PropertyResult);

  //Invoke a method on the element
  rpc MoveKeyboardFocus (KeyboardFocusRequest) returns (KeyboardFocusResult);

  //Simulate keyboard input
  rpc SendInput (InputRequest) returns (InputResult);

  // Returns the effective background color, by attempting to look at the backgrounds of parent elements
  rpc GetEffectiveBackground (EffectiveBackgroundQuery) returns (EffectiveBackgroundResult);

  //Sets a property
  rpc SetProperty (SetPropertyRequest) returns (PropertyResult);
  
  //Set a property with XAML content
  rpc SetXamlProperty (SetXamlPropertyRequest) returns (ElementResult);

  //Get resource
  rpc GetResource (ResourceQuery) returns (ResourceResult);

  //Get the screen coordinates of an element
  rpc GetCoordinates (CoordinatesQuery) returns (CoordinatesResult);

  //Create a new window with the given configuration
  rpc CreateWindow (WindowConfiguration) returns (WindowResult);

  //Initialize the application
  rpc InitializeApplication (ApplicationConfiguration) returns (ApplicationResult);

  //Get an image of the specified element
  rpc GetScreenshot (ImageQuery) returns (ImageResult);

  //Request an application shutdown
  rpc Shutdown (ShutdownRequest) returns (ShutdownResult);

  //Register a new serializer
  rpc RegisterSerializer (SerializerRequest) returns (SerializerResult);

  //Register for an event
  rpc RegisterForEvent(EventRegistrationRequest) returns (EventRegistrationResult);

  //Un-register for an event
  rpc UnregisterForEvent(EventUnregisterRequest) returns (EventUnregisterResult);

  //Get invocations for an event
  rpc GetEventInvocations(EventInvocationsQuery) returns (EventInvocationsResult);

  //Invoke remote callback
  rpc RemoteInvocation(RemoteInvocationRequest) returns (RemoteInvocationResult);

  //Simple check of versions; useful as a heartbeet
  rpc GetVersion(VersionRequest) returns (VersionResult);

  //Highlight an element
  rpc HighlightElement(HighlightRequest) returns (HighlightResult);
}

message GetWindowsQuery {
}

message GetWindowsResult {
  repeated string windowIds = 1;
}

message ElementQuery {
  string windowId = 1;
  string parentId = 2;
  string query = 3;
  bool ignoreMissing = 4;
}

message ElementResult {
  repeated string errorMessages = 1;
  repeated Element elements = 2;
}

message Element {
  string id = 1;
  string type = 2;
}

message PropertyQuery {
  string elementId = 1;
  string name = 2;
  string ownerType = 3;
}

message PropertyResult {
  repeated string errorMessages = 1;
  string value = 2;
  string valueType = 3;
  string propertyType = 4;
  Element element = 5;
}

message EffectiveBackgroundQuery {
  string elementId = 1;
  string toElementId = 2;
}

message EffectiveBackgroundResult {
  repeated string errorMessages = 1;
  int32 red = 2;
  int32 green = 3;
  int32 blue = 4;
  int32 alpha = 5;
}

message SetPropertyRequest {
  string elementId = 1;
  string name = 2;
  string value = 3;
  string valueType = 4;
  string ownerType = 5;
}

message XamlNamespace {
  string prefix = 1;
  string uri = 2;
}

message SetXamlPropertyRequest {
  string elementId = 1;
  string name = 2;
  string ownerType = 3;
  string xaml = 4;
  repeated XamlNamespace namespaces = 5;
}

message ResourceQuery {
  string elementId = 1;
  string key = 2;
}

message ResourceResult {
  repeated string errorMessages = 1;
  string key = 2;
  string value = 3;
  string valueType = 4;
}

message CoordinatesQuery {
  string elementId = 1;
}

message CoordinatesResult {
  repeated string errorMessages = 1;
  double left = 2;
  double top = 3;
  double right = 4;
  double bottom = 5;
}

message XmlNamespaceConfiguration {
  string prefix = 1;
  string value = 2;
}

message ApplicationConfiguration {
  repeated string assembliesToLoad = 1;
  string applicationResourceXaml = 2;
}

message ApplicationResult {
  repeated string errorMessages = 1;
}

message WindowConfiguration {
  string xaml = 1;
  string windowType = 2;
  bool fitToScreen = 3;
}

message WindowResult {
  repeated string errorMessages = 1;
  repeated string logMessages = 2;
  string windowsId = 3;
}

message ImageQuery {
}

message ImageResult {
  repeated string errorMessages = 1;
  bytes data = 2;
}

message KeyboardFocusRequest {
  string elementId = 1;
}

message KeyboardFocusResult {
  repeated string errorMessages = 1;
}

message InputRequest {
  string elementId = 1;
  repeated KeyboardData keyboardData = 2;
  repeated MouseData mouseData = 3;
}

message InputResult {
  repeated string errorMessages = 1;
  repeated string logMessages = 2;
  int32 cursorX = 3;
  int32 cursorY = 4;
}

message KeyboardData {
  string textInput = 1;
  repeated int32 keys = 2;
  repeated int32 modifiers = 3;
}

message MouseData {
  enum MouseEvent {
    MoveToElement = 0;
    MoveRelative = 1;
    MoveAbsolute = 2;
    LeftDown = 3;
    LeftUp = 4;
    MiddleDown = 5;
    MiddleUp = 6;
    RightDown = 7;
    RightUp = 8;
    Delay = 9;
  }
  MouseEvent event = 1;
  string value = 2;
}

message ShutdownRequest {
  int32 exitCode = 1;
}

message ShutdownResult {
  repeated string errorMessages = 1;
}

message SerializerRequest {
  string serializerType = 1;
  int32 insertIndex = 2;
}

message SerializerResult {
  repeated string errorMessages = 1;
}

message EventRegistrationRequest {
  string elementId = 1;
  string eventName = 2;
}

message EventRegistrationResult {
  repeated string errorMessages = 1;
  string eventId = 2;
}

message EventUnregisterRequest {
  string eventId = 1;
}

message EventUnregisterResult {
  repeated string errorMessages = 1;
}

message EventInvocationsQuery {
  string eventId = 1;
}

message EventInvocation {
  repeated string parameters = 1;
}

message EventInvocationsResult {
  repeated string errorMessages = 1;
  string eventId = 2;
  repeated EventInvocation eventInvocations = 3;
}

message RemoteInvocationRequest {
  string elementId = 1;
  string methodContainerType = 2;
  string methodName = 3;
  string assembly = 4;
  repeated string parameters = 5;
  repeated string methodGenericTypes = 6;
}

message RemoteInvocationResult {
  repeated string errorMessages = 1;
  string value = 2;
  string valueType = 3;
}

message VersionRequest {
}

message VersionResult {
  repeated string errorMessages = 1;
  string xamlTestVersion = 2;
  string appVersion = 3;
}

message HighlightRequest {
  string elementId = 1;
  string borderBrush = 2;
  double borderThickness = 3;
  string overlayBrush = 4;
  bool isVisible = 5;
}

message HighlightResult {
  repeated string errorMessages = 1;
}